{
  "name": "clonkrefiniparser",
  "version": "1.0.0",
  "description": "Lightweight parser for INI-Files and Clonk (R) game references",
  "main": "ref.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gwTumm/clonkrefiniparse.git"
  },
  "dependencies": {
    "line-input-stream": ">=1.0.1"
  },
  "keywords": [
    "ini",
    "clonk",
    "parser"
  ],
  "author": {
    "name": "gwTumm"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "JavaScript INI Parser\n=============\n\nThis library allows you to parse any valid INI file.\nHowever, its main goal is to be able to parse any game reference\nof the game Clonk (R) (see http://www.clonk.de), including the\nmain masterserver's output. Since the used format hasn't really \nchanged since Clonk Planet was released, it should be compatible\nwith any network-capable version of Clonk, including OpenClonk\nand Clonk Rage.\n\nIt is implemented in pure JavaScript and bundled as a CommonJS-module,\nbut it can also be used in non-moduled environments like modern\nES5-browsers.\n\nExample Usage\n------------------\n\nParse an INI file in node.js and output the generated JSON to the console:\n\n\tvar refparse = require('clonkrefiniparser'),\n\t\tfs = require('fs'),\n\t\tfh = fs.createReadStream(\"input.ini\", \"r\");\n\t\n\trefparse.parseReferenceStream(fh, function(err, root){\n\t\t// Root element contains the top-level sections\n\t\tif(err){\n\t\t\tconsole.warn(\"Error: \" + err);\n\t\t} else {\n\t\t\tconsole.log(\"Data read: \" + JSON.stringify(root));\n\t\t}\n\t});\n\t\t\nRequest an INI file in node.js over HTTP, parse it and output the generated JSON to the console:\n\n\tvar refparse = require('clonkrefiniparser'),\n\t\thttp = require('http');\n\t\n\t// Request game information from the OpenClonk masterserver\n\thttp.get(\"http://boom.openclonk.org/server/\", function(fh){\n\t\trefparse.parseReferenceStream(fh, function(err, root){\n\t\t\t// Root element contains the top-level sections\n\t\t\tif(err){\n\t\t\t\tconsole.warn(\"Error: \" + err);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Data read: \" + JSON.stringify(root));\n\t\t\t}\n\t\t});\n\t});\n\nParse an INI file in the browser (assuming ref.js was previously loaded in a script-tag)\nand output it using an alert-window:\n\n\tvar root = parseReferenceString(\"[OpenClonk]\\nMOTD=<c 0fff0f>OpenClonk released!</c>\");\n\talert(JSON.stringify(root));\n\t\nUsage information\n------------------\n\nparseReferenceStream is the preferred method in a node.js-environment and can be used asynchronously. It uses\nthe data read from a provided ReadableStream, which is read line by line. This allows it to\nprocess rather big files. The given callback is executed when the underlying stream casts the 'end'-event.\n\nIn case your parsed file is built up like a tree (used by Clonk), by default 2 spaces mean one level.\nNote that the parser accepts multiple sections with the same names on one level. Because of this, the following\nreference produces this output:\n\n\t[Reference]\n\tGameId=382\n\tTitle=\"Foo\"\n\t\t\n\t  [Info]\n\t  Comment=\"Hello world\"\n\t\n\t[Reference]\n\tGameId=394\n\tTitle=\"Bar\"\n\t\nTurns into:\n\n\t{\"Reference\": \n\t\t[\n\t\t\t{\t\"GameId\":\t382,\n\t\t\t\t\"Title\":\t\"foo\"\n\t\t\t\t\"Info\":\t\t{\t\"Comment\":\t\"Hello world\"\t}\n\t\t\t},\n\t\t\t{\t\"GameId\":\t394,\n\t\t\t\t\"Title\":\t\"Bar\"\n\t\t\t}\n\t\t]\n\t}\n\nConsult the node.js-documentation on its Stream-API for further information on the usage of parseReferenceStream.\n",
  "_id": "clonkrefiniparser@1.0.0",
  "dist": {
    "shasum": "ded873053fee19ea7a097fdf233b6bfd8abd4290",
    "tarball": "http://registry.npmjs.org/clonkrefiniparser/-/clonkrefiniparser-1.0.0.tgz"
  },
  "_npmVersion": "1.1.69",
  "_npmUser": {
    "name": "gwtumm",
    "email": "timklge@gmail.com"
  },
  "maintainers": [
    {
      "name": "gwtumm",
      "email": "timklge@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "ded873053fee19ea7a097fdf233b6bfd8abd4290",
  "_from": "clonkrefiniparser@",
  "_resolved": "https://registry.npmjs.org/clonkrefiniparser/-/clonkrefiniparser-1.0.0.tgz"
}
