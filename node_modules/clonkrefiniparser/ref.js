/*
        DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
                    Version 2, December 2004 

 Copyright (C) 2004 Sam Hocevar <sam@hocevar.net> 

 Everyone is permitted to copy and distribute verbatim or modified 
 copies of this license document, and changing it is allowed as long 
 as the name is changed. 

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 

  0. You just DO WHAT THE FUCK YOU WANT TO.
*/

(function(){	
	var ismodule = (module !== 'undefined' && module.exports);

	function prefixcount(str, symb){
		var i = 0, c = (symb && symb.length == 1 ? symb : " ");
		while(i < str.length && str[i] == c) i++;
		return i;
	}

	function setrefattribute(ref, title, attr){
		if(!ref[title]){
			ref[title] = attr;
		} else if(ref[title] instanceof Array){
			ref[title].push(attr);
		} else {
			ref[title] = [ref[title], attr];
		}
	}
	
	function parseline(line, currentele, tabwidth){
		var lvl = prefixcount(line) / tabwidth + 1, 
			s = line.trim();
		if(!s || s.length == 0) return; // Leere Zeile skippen
		
		if(s[0] == "["){ // Neue Sektion auf Ebene lvl!
			var newsection = {}, 
				newsectiontitle = s.substr(1, s.length-2);
				
			currentele[lvl] = newsection;
			setrefattribute(currentele[lvl-1], newsectiontitle, newsection);
		} else { // Attribut setzen
			var key = s.substr(0, s.indexOf("=")),
				val = s.substr(s.indexOf("=")+1);
			if(!currentele[lvl]){ // Wenn auf dieser Ebene keine Sektion geöffnet wurde... 
				// ToDo: Fehler durchreichen
				return; // Skip
			}
			if(val == "true" || val == "false"){ // Boolean
				val = (val == "true");
			} else if(parseInt(val, 10).toString() == val){
				val = parseInt(val, 10); 
			} else {
				if(val[0] == '"' && val[val.length-1] == '"') val = val.substring(1, val.length-1);
				var oct = /\\\d\d\d/g, x = {};
				while(x = oct.exec(val)){
					val = val.replace(oct, String.fromCharCode(parseInt(x[0].substr(1), 8)));
				}
			}
			setrefattribute(currentele[lvl], key, val);
		}
	}
	
	var parsestream = function(readstream, callback, options){
		if(!ismodule) throw "Not in CommonJS-environment.";
		
		var LineStream = require('line-input-stream'),
			stream = LineStream(readstream),
			currentele = {0: {}},
			tabwidth = options && options.tabwidth ? options.tabwidth : 2;
	
		stream.on("line", function(line){
			parseline(line, currentele, tabwidth);
		});

		stream.on("end", function(){
			if(callback) callback(undefined, currentele[0]);
		});
	};
	
	var parsestring = function(string, options){
		var currentele = {0: {}},
			tabwidth = options && options.tabwidth ? options.tabwidth : 2,
			lines = string.split("\n");
		
		lines.forEach(function(v){
			parseline(v, currentele, tabwidth);
		});
		return currentele[0];
	};	

	if(ismodule){ // Wenn in CommonJS, die beiden Methoden exportieren
		exports.parseReferenceStream = parsestream;
		exports.parseReferenceString = parsestring;
	} else { // Wenn nicht, dann ins globale Objekt klatschen
		parseReferenceStream = parsestream;
		parseReferenceString = parsestring;
	}
}());
